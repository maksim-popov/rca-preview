{"version":3,"sources":["redux/auth.js","components/LoginPage.js","redux/data.js","components/UploadPage.js","components/AdminPage/commons/SelectMonth.js","components/AdminPage/UploadsStatus.js","components/AdminPage/ProjectManagement.js","redux/users.js","components/AdminPage/UsersPage.js","components/AdminPage/ReportPage.js","components/AdminPage/ExcelReport.js","components/AdminPage/HistoryPage.js","components/AdminPage/Charts.js","components/AdminPage/index.js","redux/index.js","components/Header.js","components/ManagerPage.js","serviceWorker.js","index.js","App.js"],"names":["loginSaga","logoutSaga","getLoginStatusSaga","authSaga","LOGIN","LOGOUT","GET_LOGIN_STATUS","SET_LOGIN_STATUS","SET_LOGIN_ERRORS","CLEAR_LOGIN_ERRORS","take","payload","fetch","method","headers","body","JSON","stringify","response","json","res","loginStatus","put","type","availableObjects","availableForUploads","username","history","push","loginErrorMessage","message","all","LoginPageForm","withRouter","connect","state","login","props","useEffect","form","validateFields","fieldsError","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","passwordError","className","onSubmit","e","preventDefault","err","values","console","log","Item","validateStatus","help","rules","required","prefix","style","color","placeholder","valuePropName","initialValue","auth","htmlType","disabled","Object","keys","some","field","LoginPage","Form","create","name","getCurrentObjectInfoSaga","getCurrentMonthInfoSaga","changeShareSaga","getProjectStructureSaga","addNewObjectSaga","deleteObjectSaga","deleteReportSaga","createExcelSaga","getHistorySaga","getChartInfoSaga","dataSaga","FileSaver","require","GET_CURRENT_OBJECT_INFO","SET_CURRENT_OBJECT_INFO","CLEAR_CURRENT_OBJECT_INFO","GET_CURRENT_MONTH_INFO","SET_CURRENT_MONTH_INFO","CHANGE_SHARE","GET_PROJECT_STRUCTURE","SET_PROJECT_STRUCTURE","ADD_NEW_OBJECT","DELETE_OBJECT","DELETE_REPORT","CREATE_EXCEL","GET_HISTORY","SET_HISTORY","GET_CHART_INFO","SET_CHART_INFO","getCurrentMonthInfo","getProjectStructure","month","blob","saveAs","startState","currentObjectInfo","currentMonthInfo","projectStructure","chartInfo","Option","Select","UploadPage","getCurrentObjectInfo","deleteReport","clearCurrentObjectInfo","useState","currentObject","setCurrentObject","Date","now","getFullYear","year","setYear","setCurrentObjectInfo","beforeUpload","file","isXLSX","error","columns","title","dataIndex","key","render","status","fontSize","action","data","project","split","object","onChange","info","a","success","ghost","onClick","value","width","marginRight","map","item","min","max","defaultValue","pagination","showHeader","textAlign","dataSource","previousMonth","currentMonth","slice","toString","SelectMonth","setCurrentMonth","currentMonthName","display","nextMonth","UploadsStatus","changeShare","today","getMonth","todayMonth","share","formatter","parser","replace","onPressEnter","currentTarget","objectName","projectName","length","marginTop","size","TreeNode","Tree","Title","Typography","ProjectManagement","addNewObject","deleteObject","newProject","setNewProject","newObject","setNewObject","gutter","margin","span","level","list","tree","objectsList","getTree","maxWidth","marginBottom","projectsList","filterOption","inputValue","option","children","toUpperCase","indexOf","actions","fontWeight","getList","getAllUsersSaga","changeAvailableProjectsSaga","changeAvailableForUploadsSaga","resetPasswordSaga","newUserSaga","deleteUserSaga","usersSaga","GET_ALL_USERS","SET_ALL_USERS","CHANGE_AVAILABLE_OBJECTS","CHANGE_AVAILABLE_FOR_UPLOADS","RESET_PASSWORD","NEW_USER","DELETE_USER","TreeSelect","UsersPage","getAllUsers","changeAvailableProjects","changeAvailableForUploads","resetPassword","newUser","deleteUser","newLogin","setNewLogin","newType","setNewType","newAvailableProjects","setNewAvailableProjects","getAllProjectsList","treeList","forEach","backgroundColor","borderRadius","lg","padding","target","showSearch","multiple","block","role","password","users","usersList","usersCardList","user","listForUploads","availableProjects","userCardsList","ReportPage","byProject","setByProject","setShare","setColumns","setData","rows","code","createColumns","sort","sortByProject","fixed","find","el","align","refactorNumber","number","str","Math","round","b","row","dataObj","total","col","index","position","code3000","code4000","svd","svdnd","abs","createData","defaultChecked","checked","setTab","scroll","x","y","months","ExcelReport","createExcel","firstMonth","setFirstMonth","lastMonth","setLastMonth","changeProjects","setChangeProjects","projects","setProjects","paddingLeft","HistoryPage","getHistory","date","dateObj","minutes","getMinutes","getHours","getDate","period","Charts","getChartInfo","AdminPage","tab","selectedKeys","mode","renderPage","rootSaga","reducer","combineReducers","saga","createSagaMiddleware","store","createStore","applyMiddleware","run","Header","getLoginStatus","logout","redirect","ManagerPage","Boolean","window","location","hostname","match","ReactDOM","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aea21f9d.chunk.js","sourcesContent":["import {put, take, all} from \"redux-saga/effects\";\n\n\n\n// action types\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\nconst GET_LOGIN_STATUS = 'GET_LOGIN_STATUS';\nconst SET_LOGIN_STATUS = 'SET_LOGIN_STATUS';\nconst SET_LOGIN_ERRORS = 'SET_LOGIN_ERRORS';\nconst CLEAR_LOGIN_ERRORS = 'CLEAR_LOGIN_ERRORS';\n\n\n// actions\nexport const login = payload =>{\n    return{\n        type: LOGIN,\n        payload: payload\n    }\n};\n\nexport const getLoginStatus = () =>{\n    return{\n        type: GET_LOGIN_STATUS\n    }\n};\n\nexport const logout = () =>{\n    return{\n        type: LOGOUT\n    }\n};\n\n\n// sagas\n\nfunction* loginSaga() {\n    while (true){\n        const { payload } = yield take(LOGIN);\n        const response = yield fetch('/login', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        const res = yield response.json();\n        if (res.loginStatus) {\n            yield put({type: SET_LOGIN_STATUS, payload: {loginStatus: res.loginStatus, availableObjects: res.availableObjects, availableForUploads: res.availableForUploads, username: res.username}});\n            if (res.loginStatus === 'admin') {\n                payload.history.push('/admin')\n            }\n        } else {\n            yield put({type: SET_LOGIN_ERRORS, payload: {loginStatus: false, loginErrorMessage: res.message}});\n        }\n    }\n}\n\nfunction* logoutSaga() {\n    while (true){\n        yield take(LOGOUT);\n        yield fetch('/logout');\n        yield put({type: SET_LOGIN_STATUS, payload: {loginStatus: false}})\n    }\n}\n\nfunction* getLoginStatusSaga() {\n    while (true){\n        yield take(GET_LOGIN_STATUS);\n        const response = yield fetch('/get_login_status');\n        const res = yield response.json();\n        if (res.loginStatus){\n            yield put({type: SET_LOGIN_STATUS, payload: {loginStatus: res.loginStatus, availableObjects: res.availableObjects, availableForUploads: res.availableForUploads, username: res.username}})\n        }else{\n            yield put({type: SET_LOGIN_STATUS, payload: {loginStatus: false}})\n        }\n    }\n}\n\n\n// reducer\n\nexport function authReducer(state = {loginStatus: false, loginErrorMessage: '', availableObjects: '', availableForUploads: '', username: ''}, action) {\n    const { type, payload } = action;\n    switch (type) {\n        case SET_LOGIN_STATUS:\n            return { ...state, loginStatus: payload.loginStatus, loginErrorMessage: '', availableObjects: payload.availableObjects, availableForUploads: payload.availableForUploads, username: payload.username};\n        case SET_LOGIN_ERRORS:\n            return { ...state, loginStatus: false, loginErrorMessage: payload.loginErrorMessage};\n        case CLEAR_LOGIN_ERRORS:\n            return { ...state, loginStatus: false, loginErrorMessage: ''};\n        default :\n            return state\n    }\n}\n\n\n// root saga\nexport function* authSaga() {\n    yield all([\n        loginSaga(),\n        logoutSaga(),\n        getLoginStatusSaga(),\n    ]);\n}\n","import React, {useEffect} from 'react';\nimport {Form, Icon, Input, Button, Checkbox, Alert} from 'antd';\nimport {connect} from 'react-redux';\nimport {withRouter} from \"react-router-dom\";\nimport {login} from \"../redux/auth\";\n\nfunction hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nconst mapStateToProps = state =>{\n    return{\n        ...state\n    }\n};\n\nconst LoginPageForm =  withRouter(connect(mapStateToProps, {login})((props) => {\n\n    useEffect(() => {\n        props.form.validateFields();\n    }, []);\n\n       const handleSubmit = e => {\n            e.preventDefault();\n            props.form.validateFields((err, values) => {\n                if (!err) {\n                    console.log('Received values of form: ', values);\n                    props.login({...values, history: props.history})\n                }\n            });\n        };\n\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = props.form;\n    const usernameError = isFieldTouched('username') && getFieldError('username');\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n\n        return (\n            <div>\n                <h1>Report Consolidation App</h1>\n                <div className=\"login-container\">\n                    <Form className=\"login-form\" onSubmit={handleSubmit}>\n                        <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n                            {getFieldDecorator('username', {\n                                rules: [{ required: true, message: 'Пожалуйста, введите Ваш логин!' }],\n                            })(\n                                <Input\n                                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                    placeholder=\"Логин\"\n                                />,\n                            )}\n                        </Form.Item>\n                        <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n                            {getFieldDecorator('password', {\n                                rules: [{ required: true, message: 'Пожалуйста, введите пароль!' }],\n                            })(\n                                <Input\n                                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                    type=\"password\"\n                                    placeholder=\"Пароль\"\n                                />,\n                            )}\n                        </Form.Item>\n                        <Form.Item>\n                            {getFieldDecorator('remember', {\n                                valuePropName: 'checked',\n                                initialValue: true,\n                            })(<Checkbox>Запомнить меня</Checkbox>)}\n                        </Form.Item>\n                        {props.auth.loginErrorMessage ?\n                            <Alert message={props.auth.loginErrorMessage} className=\"login-msg\" type=\"error\"/>\n                            : null\n                        }\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" disabled={hasErrors(getFieldsError())}>\n                                Войти\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n            </div>\n        );\n\n}));\n\nconst LoginPage = Form.create({ name: 'horizontal_login' })(LoginPageForm);\n\nexport default LoginPage;\n","import {put, take, all} from \"redux-saga/effects\";\nvar FileSaver = require('file-saver');\n\n// action types\n\nconst GET_CURRENT_OBJECT_INFO = 'GET_CURRENT_OBJECT_INFO';\nconst SET_CURRENT_OBJECT_INFO = 'SET_CURRENT_OBJECT_INFO';\nconst CLEAR_CURRENT_OBJECT_INFO = 'CLEAR_CURRENT_OBJECT_INFO';\nconst GET_CURRENT_MONTH_INFO = 'GET_CURRENT_MONTH_INFO';\nconst SET_CURRENT_MONTH_INFO = 'GET_CURRENT_MONTH_INFO';\nconst CHANGE_SHARE = 'CHANGE_SHARE';\nconst GET_PROJECT_STRUCTURE = 'GET_PROJECT_STRUCTURE';\nconst SET_PROJECT_STRUCTURE = 'SET_PROJECT_STRUCTURE';\nconst ADD_NEW_OBJECT = 'ADD_NEW_OBJECT';\nconst DELETE_OBJECT = 'DELETE_OBJECT';\nconst DELETE_REPORT = 'DELETE_REPORT';\nconst CREATE_EXCEL = 'CREATE_EXCEL';\nconst GET_HISTORY = 'GET_HISTORY';\nconst SET_HISTORY = 'SET_HISTORY';\nconst GET_CHART_INFO = 'GET_CHART_INFO';\nconst SET_CHART_INFO = 'SET_CHART_INFO';\n\n// actions\n\nexport const getCurrentObjectInfo = (payload) =>{\n    return{\n        type: GET_CURRENT_OBJECT_INFO,\n        payload: payload\n    }\n};\n\nexport const clearCurrentObjectInfo = () =>{\n    return{\n        type: CLEAR_CURRENT_OBJECT_INFO,\n    }\n};\n\n\nexport const getCurrentMonthInfo = (payload) =>{\n    return{\n        type: GET_CURRENT_MONTH_INFO,\n        payload: payload\n    }\n};\n\nexport const changeShare = (payload) =>{\n    return{\n        type: CHANGE_SHARE,\n        payload: payload\n    }\n};\n\nexport const getProjectStructure = () =>{\n    return{\n        type: GET_PROJECT_STRUCTURE,\n    }\n};\n\nexport const addNewObject = (payload) =>{\n    return{\n        type: ADD_NEW_OBJECT,\n        payload: payload\n    }\n};\n\nexport const deleteObject = (payload) =>{\n    return{\n        type: DELETE_OBJECT,\n        payload: payload\n    }\n};\n\nexport const deleteReport = (payload) =>{\n    return{\n        type: DELETE_REPORT,\n        payload: payload\n    }\n};\n\nexport const createExcel = (payload) =>{\n    return{\n        type: CREATE_EXCEL,\n        payload: payload\n    }\n};\n\nexport const getHistory = (payload) =>{\n    return{\n        type: GET_HISTORY,\n        payload: payload\n    }\n};\n\nexport const getChartInfo = (payload) =>{\n    return{\n        type: GET_CHART_INFO,\n        payload: payload\n    }\n};\n\n\n// sagas\n\nfunction* getCurrentObjectInfoSaga() {\n    while (true){\n        const {payload} = yield take(GET_CURRENT_OBJECT_INFO);\n        const response = yield fetch('/get_current_object_info', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        const res = yield response.json();\n        yield put({type: SET_CURRENT_OBJECT_INFO, payload: res});\n    }\n}\n\nfunction* getCurrentMonthInfoSaga() {\n    while (true){\n        const {payload} = yield take(GET_CURRENT_MONTH_INFO);\n        const response = yield fetch('/get_current_month_info', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        const res = yield response.json();\n        yield put({type: SET_CURRENT_MONTH_INFO, payload: res});\n    }\n}\n\nfunction* changeShareSaga() {\n    while (true){\n        const {payload} = yield take(CHANGE_SHARE);\n        yield fetch('/change_share', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_CURRENT_MONTH_INFO, payload: {month: payload.month, availableObjects: payload.availableObjects}});\n    }\n}\n\nfunction* getProjectStructureSaga() {\n    while (true){\n        yield take(GET_PROJECT_STRUCTURE);\n        const response = yield fetch('/get_project_structure');\n        const res = yield response.json();\n        yield put({type: SET_PROJECT_STRUCTURE, payload: res});\n    }\n}\n\nfunction* addNewObjectSaga() {\n    while (true){\n        const {payload} = yield take(ADD_NEW_OBJECT);\n        yield fetch('/add_new_object', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_PROJECT_STRUCTURE});\n    }\n}\n\nfunction* deleteObjectSaga() {\n    while (true){\n        const {payload} = yield take(DELETE_OBJECT);\n        yield fetch('/delete_object', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_PROJECT_STRUCTURE});\n    }\n}\n\nfunction* deleteReportSaga() {\n    while (true){\n        const {payload} = yield take(DELETE_REPORT);\n        yield fetch('/delete_report', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_CURRENT_OBJECT_INFO, payload: payload});\n    }\n}\n\nfunction* createExcelSaga() {\n    while (true){\n        const {payload} = yield take(CREATE_EXCEL);\n        const response = yield fetch('/create_excel', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const blob = yield response.blob();\n        FileSaver.saveAs(blob, \"report.xlsx\");\n        console.log(\"response.blob(): \", blob);\n    }\n}\n\nfunction* getHistorySaga() {\n    while (true){\n        const {payload} = yield take(GET_HISTORY);\n        const response = yield fetch('/get_history', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        const res = yield response.json();\n        yield put({type: SET_HISTORY, payload: res});\n    }\n}\n\nfunction* getChartInfoSaga() {\n    while (true){\n        const {payload} = yield take(GET_CHART_INFO);\n        const response = yield fetch('/get_chart_info', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        const res = yield response.json();\n        yield put({type: SET_CHART_INFO, payload: res});\n    }\n}\n\n\n// reducer\n\nconst startState = {\n    currentObjectInfo: '',\n    currentMonthInfo: '',\n    projectStructure: '',\n    history: '',\n    chartInfo: {},\n};\n\nexport function dataReducer(state = startState, action) {\n    const { type, payload } = action;\n    switch (type) {\n        case SET_CURRENT_OBJECT_INFO:\n            return { ...state, currentObjectInfo: payload};\n        case CLEAR_CURRENT_OBJECT_INFO:\n            return { ...state, currentObjectInfo: ''};\n        case SET_CURRENT_MONTH_INFO:\n            return { ...state, currentMonthInfo: payload};\n        case SET_PROJECT_STRUCTURE:\n            return { ...state, projectStructure: payload};\n        case SET_HISTORY:\n            return { ...state, history: payload};\n        case SET_CHART_INFO:\n            return { ...state, chartInfo: payload};\n        default :\n            return state\n    }\n}\n\n\n// root saga\nexport function* dataSaga() {\n    yield all([\n        getCurrentObjectInfoSaga(),\n        getCurrentMonthInfoSaga(),\n        changeShareSaga(),\n        getProjectStructureSaga(),\n        addNewObjectSaga(),\n        deleteObjectSaga(),\n        deleteReportSaga(),\n        createExcelSaga(),\n        getHistorySaga(),\n        getChartInfoSaga(),\n    ]);\n}\n","import React, {useEffect, useState} from 'react';\nimport { Select, Button, Icon, InputNumber, Table, Alert, Upload, message} from 'antd';\nimport {clearCurrentObjectInfo, deleteReport, getCurrentObjectInfo} from \"../redux/data\";\nimport {connect} from \"react-redux\";\nconst { Option } = Select;\n\n\nexport const UploadPage = connect(state => state, {getCurrentObjectInfo, deleteReport, clearCurrentObjectInfo})((props) => {\n    const [currentObject, setCurrentObject] = useState('');\n    const [year, setYear] = useState((new Date(Date.now())).getFullYear());\n    const [currentObjectInfo, setCurrentObjectInfo] = useState('');\n\n    function onChangeObject(value) {\n        setCurrentObjectInfo('');\n        console.log(`selected ${value}`);\n        setCurrentObject(value)\n    }\n\n    function onChangeYear(value) {\n        setCurrentObjectInfo('');\n        console.log('changed', value);\n        setYear(value)\n    }\n\n    function beforeUpload(file) {\n        const isXLSX = file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" || \"application/vnd.ms-excel\";\n        if (!isXLSX) {\n            message.error('Не верный формат файла');\n        }\n        return isXLSX\n    }\n\n    const columns = [\n        {\n            title: 'Месяц',\n            dataIndex: 'month',\n            key: 'month',\n        },\n        {\n            title: 'Статус',\n            dataIndex: 'status',\n            key: 'status',\n            render: (status) => {\n                if (status) {\n                    return(<div><Icon style={{color:\"limegreen\", fontSize: 26}} type=\"check-circle\" /></div>)\n                } else {\n                    return(<div><Icon style={{fontSize: 26}} type=\"clock-circle\" /></div>)\n                }\n            },\n        },\n        {\n            title: 'Действие',\n            dataIndex: 'action',\n            key: 'action',\n            render: (action) => {\n                if (action.type === 'upload') {\n                    return(<div>\n                        <Upload\n                            beforeUpload={beforeUpload}\n                            action={'/file'}\n                            data={{project: currentObject.split(':')[0], object: currentObject.split(':')[1], month: action.key, username: props.auth.username}}\n                            onChange={ async (info) => {\n                                if (info.file.status !== 'uploading') {\n\n                                }\n                                if (info.file.status === 'done') {\n                                    message.success(`Файл успешно загружен`);\n                                    props.getCurrentObjectInfo({project: currentObject.split(':')[0], object: currentObject.split(':')[1], year: year})\n                                } else if (info.file.status === 'error') {\n                                    console.log(info);\n                                    message.error(`Не удаловь загрузить файл.`);\n                                    message.error(info.file.response.message);\n                                }\n                            }\n                            }>\n                            <Button>\n                                <Icon type=\"upload\" /> Загрузить файл\n                            </Button>\n                        </Upload>\n                    </div>)\n                } else if (action.type === 'delete') {\n                    return (<Button type=\"danger\" ghost onClick={() => {\n                        props.deleteReport({project: currentObject.split(':')[0], object: currentObject.split(':')[1], year: year, month: action.key, username: props.auth.username})\n                    }}><Icon type=\"delete\"/> Удалить</Button>)\n                }\n            }\n        }];\n\n    useEffect(() => {\n        if (currentObject) {\n            props.getCurrentObjectInfo({project: currentObject.split(':')[0], object: currentObject.split(':')[1], year: year})\n        }\n    },[currentObject, year]);\n\n    useEffect(() => {\n        setCurrentObjectInfo(props.data.currentObjectInfo)\n    }, [props.data.currentObjectInfo]);\n\n    useEffect(() => () => {\n        props.clearCurrentObjectInfo();\n        }, []);\n\n    return (\n        <div>\n            <h1 className='page-title'>\n                Загрузка отчета\n            </h1>\n            <span className='input-label'>Проект:</span>\n            <Select value={currentObject} style={{ width: 200, marginRight: 50 }} onChange={onChangeObject}>\n                {props.auth.availableForUploads ?\n                    props.auth.availableForUploads.map((item) => {\n                    return (<Option value={item.project + ':' + item.object} key={item.project + item.object}>{item.project + (item.object ? ': ' + item.object : '')}</Option>)\n                    }) : null\n                }\n            </Select>\n            <span className='input-label'>Год:</span>\n            <InputNumber min={2019} max={2029} defaultValue={year} onChange={onChangeYear} />\n            {props.data.currentObjectInfo ?\n                <Table className='upload-table' pagination={false} showHeader={true} columns={columns} style={{textAlign: \"center\"}}\n                       dataSource={currentObjectInfo}/> : null\n            }\n        </div>\n    );\n});\n\n","import React from 'react'\nimport {Button, Icon} from \"antd\";\n\nexport function nextMonth (currentMonth) {\n    let month = +currentMonth.slice(-2);\n    if (month === 12) {\n        return ((+currentMonth.slice(0, 4) + 1).toString() + '01')\n    } else {\n        return (currentMonth.slice(0, 4) + ('0' + (month + 1).toString()).slice(-2))\n    }\n}\n\nexport function previousMonth(currentMonth) {\n    let month = +currentMonth.slice(-2);\n    if (month === 1) {\n        return ((+currentMonth.slice(0, 4) - 1).toString() + '12')\n    } else {\n        return (currentMonth.slice(0, 4) + ('0' + (month - 1).toString()).slice(-2))\n    }\n}\n\nexport const SelectMonth = ({currentMonth, setCurrentMonth, currentMonthName}) => {\n\n    return (\n        <div>\n            <div style={{fontSize: 24}}>\n                <Button className='arrowsBnt' onClick={() => {\n                    setCurrentMonth(previousMonth(currentMonth))\n                }}><Icon type=\"left\"/></Button>\n                <span style={{width: 170, display: \"inline-block\"}}> {currentMonthName} </span>\n                <Button className='arrowsBnt' onClick={() => {\n                    setCurrentMonth(nextMonth(currentMonth))\n                }}><Icon type=\"right\"/></Button>\n            </div>\n        </div>\n    )\n};","import React, {useEffect, useState} from 'react'\nimport {connect} from 'react-redux'\nimport { Icon, InputNumber, Table } from 'antd';\nimport {getCurrentMonthInfo, changeShare} from \"../../redux/data\";\nimport { SelectMonth, previousMonth } from \"./commons/SelectMonth\";\n\n\nconst mapStateToProps = (state) => {\n    return {...state,}\n};\n\n\nexport const UploadsStatus = connect(mapStateToProps, {getCurrentMonthInfo, changeShare})((props) => {\n    const today = new Date(Date.now());\n    console.log(today.getMonth());\n    const todayMonth = (today.getFullYear().toString())+((0+(today.getMonth()+1).toString()).slice(-2));\n    const [currentMonth, setCurrentMonth] = useState(previousMonth(todayMonth));\n\n    const columns = [\n        {\n            title: 'Проект/Объект',\n            dataIndex: 'projectName',\n            key: 'projectName',\n        },\n        {\n            title: 'Статус',\n            dataIndex: 'status',\n            key: 'status',\n            render: (status) => {\n                if (status) {\n                    return(<div><Icon style={{color:\"limegreen\", fontSize: 22}} type=\"check-circle\" /></div>)\n                } else {\n                    return(<div><Icon style={{fontSize: 22}} type=\"clock-circle\" /></div>)\n                }\n            },\n        },\n        {\n            title: 'Долевое участие',\n            dataIndex: 'share',\n            key: 'share',\n            render: (share) => {\n                if(share) {\n                    return (<div>\n                        {props.auth.loginStatus === 'admin' ?\n                            <InputNumber\n                                defaultValue={share.value}\n                                min={0}\n                                max={100}\n                                formatter={value => `${value}%`}\n                                parser={value => value.replace('%', '')}\n                                onPressEnter={(e) => {\n                                    if (+e.currentTarget.value.slice(0, -1) <= 100) {\n                                        props.changeShare({\n                                            object: share.objectName,\n                                            project: share.projectName,\n                                            month: currentMonth,\n                                            value: +e.currentTarget.value.slice(0, -1),\n                                            availableObjects: props.auth.availableObjects.map(item => item.project + \":\" + item.object)\n                                        })\n                                    }\n                                }}\n                            />\n                            :\n                            <span>\n                                {share.value}%\n                            </span>\n                        }\n                    </div>)\n                }\n            },\n        },\n        {\n            title: 'Дата загрузки',\n            dataIndex: 'uploadDate',\n            key: 'uploadDate'\n        }\n    ];\n\n    useEffect(() => {\n            if (currentMonth && props.auth.availableObjects.length) {\n                props.getCurrentMonthInfo({month: currentMonth, availableObjects: props.auth.availableObjects.map(item => item.project + \":\" + item.object)})\n            }\n        }, [currentMonth]);\n\n        useEffect(() => {\n            if (currentMonth && props.auth.availableObjects.length) {\n                props.getCurrentMonthInfo({month: currentMonth, availableObjects: props.auth.availableObjects.map(item => item.project + \":\" + item.object)})\n            }\n        }, []);\n\n    return (\n            <div>\n                {props.data.currentMonthInfo ?\n                    <SelectMonth currentMonth={currentMonth} setCurrentMonth={setCurrentMonth} currentMonthName={props.data.currentMonthInfo.name}/>\n                    : null\n                }\n                {props.data.currentMonthInfo ?\n                    <Table style={{marginTop: 20}} pagination={false} showHeader={true} columns={columns} size=\"small\"\n                           dataSource={props.data.currentMonthInfo.data}/> : null\n                }\n            </div>\n        )\n});","import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\";\nimport {addNewObject, deleteObject, getProjectStructure} from \"../../redux/data\";\nimport {Col, Row, Tree, Typography, List, Icon, AutoComplete, Button} from \"antd\";\nconst { TreeNode } = Tree;\nconst { Title } = Typography;\n\n\nexport const ProjectManagement = connect(state => state, {getProjectStructure, addNewObject, deleteObject})((props) => {\n    const [newProject, setNewProject] = useState('');\n    const [newObject, setNewObject] = useState('');\n\n    const getTree = () => {\n        let list = [];\n        for (let project in props.data.projectStructure.tree) {\n            let objectsList = '';\n                objectsList = props.data.projectStructure.tree[project].map((object) => {\n                    if (object) {\n                        return (\n                            <TreeNode key={object} title={object}/>\n                        )\n                    }\n                });\n            if (objectsList) {\n                list.push(<TreeNode title={project} key={project}>{objectsList}</TreeNode>)\n            } else{\n                list.push(<TreeNode title={project} key={project}/>)\n            }\n        }\n        return list\n    };\n\n    const getList = () => {\n        if (props.data.projectStructure) {\n            let list = props.data.projectStructure.list.map((item) => {\n                return (\n                    <List.Item\n                        actions={[\n                            <span style={{color: 'red'}} onClick={() => {props.deleteObject({object: item.object, project: item.project})}}>\n                                <Icon type=\"delete\" /> удалить\n                            </span>\n                        ]}\n                    > <span style={{fontWeight: 600}}> {item.project} </span> {item.object} </List.Item>\n                )\n            });\n            return list\n        }\n    };\n\n    const addNew = () => {\n        if (newProject) {\n            props.addNewObject({project: newProject, object: newObject});\n            setNewProject('');\n            setNewObject('');\n        }\n    };\n\n    useEffect(() => {\n        props.getProjectStructure()\n    },[]);\n\n    return(\n        <div>\n            <Row gutter={8} style={{margin: 20}}>\n                <Col span={8} style={{textAlign: \"left\"}}>\n                    <Title level={3}>Обзор проектов</Title>\n                    {props.data.projectStructure ?\n                        <Tree>\n                            {getTree()}\n                        </Tree>\n                        : null\n                    }\n                </Col>\n                <Col span={16} style={{textAlign: \"left\", maxWidth: \"600px\"}}>\n                    <Title level={3}>Добавить новый проект/объект</Title>\n                    <div>\n                        <AutoComplete\n                            style={{ width: 210, marginRight: 20, marginBottom: 10 }}\n                            dataSource={props.data.projectStructure.projectsList}\n                            placeholder='Проект'\n                            filterOption={(inputValue, option) =>\n                                option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                            }\n                            onChange={(value) => {setNewProject(value)}}\n                            value={newProject}\n                        />\n                        <AutoComplete\n                            style={{ width: 210, marginRight: 30, marginBottom: 10 }}\n                            placeholder='Объект'\n                            filterOption={(inputValue, option) =>\n                                option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                            }\n                            onChange={(value) => {setNewObject(value)}}\n                            value={newObject}\n                        />\n                        <Button onClick={addNew}><Icon type=\"plus\" /> Добавить</Button>\n                    </div>\n                    <Title level={3} style={{marginTop: 50}}>Все объекты</Title>\n                    {props.data.projectStructure ?\n                        <List>\n                            {getList()}\n                        </List>\n                        : null\n                    }\n                </Col>\n            </Row>\n        </div>\n    )\n});","import {put, take, all} from \"redux-saga/effects\";\n\n\n// action types\n\nconst GET_ALL_USERS = 'GET_ALL_USERS';\nconst SET_ALL_USERS = 'SET_ALL_USERS';\nconst CHANGE_AVAILABLE_OBJECTS = 'CHANGE_AVAILABLE_OBJECTS';\nconst CHANGE_AVAILABLE_FOR_UPLOADS = 'CHANGE_AVAILABLE_FOR_UPLOADS';\nconst RESET_PASSWORD = 'RESET_PASSWORD';\nconst NEW_USER = 'NEW_USER';\nconst DELETE_USER = 'DELETE_USER';\n\n\n// actions\nexport const getAllUsers = () =>{\n    return{\n        type: GET_ALL_USERS,\n    }\n};\n\nexport const changeAvailableProjects = (payload) =>{\n    return{\n        type: CHANGE_AVAILABLE_OBJECTS,\n        payload: payload\n    }\n};\n\nexport const changeAvailableForUploads = (payload) =>{\n    return{\n        type: CHANGE_AVAILABLE_FOR_UPLOADS,\n        payload: payload\n    }\n};\n\nexport const resetPassword = (payload) =>{\n    return{\n        type: RESET_PASSWORD,\n        payload: payload\n    }\n};\n\nexport const newUser = (payload) =>{\n    return{\n        type: NEW_USER,\n        payload: payload\n    }\n};\n\nexport const deleteUser = (payload) =>{\n    return{\n        type: DELETE_USER,\n        payload: payload\n    }\n};\n\n\n// sagas\n\nfunction* getAllUsersSaga() {\n    while (true){\n        yield take(GET_ALL_USERS);\n        const response = yield fetch('/get_all_users');\n        const res = yield response.json();\n        yield put({type: SET_ALL_USERS, payload: res})\n    }\n}\n\nfunction* changeAvailableProjectsSaga() {\n    while (true){\n        const { payload } = yield take(CHANGE_AVAILABLE_OBJECTS);\n        yield fetch('/change_available_projects', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_ALL_USERS});\n        yield put({type: 'GET_LOGIN_STATUS'})\n    }\n}\n\nfunction* changeAvailableForUploadsSaga() {\n    while (true){\n        const { payload } = yield take(CHANGE_AVAILABLE_FOR_UPLOADS);\n        yield fetch('/change_available_for_uploads', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_ALL_USERS});\n        yield put({type: 'GET_LOGIN_STATUS'})\n    }\n}\n\nfunction* resetPasswordSaga() {\n    while (true){\n        const { payload } = yield take(RESET_PASSWORD);\n        yield fetch('/reset_password', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n    }\n}\n\nfunction* newUserSaga() {\n    while (true){\n        const { payload } = yield take(NEW_USER);\n        yield fetch('/new_user', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_ALL_USERS})\n    }\n}\n\nfunction* deleteUserSaga() {\n    while (true){\n        const { payload } = yield take(DELETE_USER);\n        yield fetch('/delete_user', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        yield put({type: GET_ALL_USERS})\n    }\n}\n\n\n// reducer\n\nexport function usersReducer(state = {usersList: ''}, action) {\n    const { type, payload } = action;\n    switch (type) {\n        case SET_ALL_USERS:\n            return { ...state, usersList: payload};\n        default :\n            return state\n    }\n}\n\n// root saga\nexport function* usersSaga() {\n    yield all([\n        getAllUsersSaga(),\n        changeAvailableProjectsSaga(),\n        resetPasswordSaga(),\n        newUserSaga(),\n        deleteUserSaga(),\n        changeAvailableForUploadsSaga()\n    ]);\n}\n","import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\";\nimport {\n    changeAvailableForUploads,\n    changeAvailableProjects,\n    deleteUser,\n    getAllUsers,\n    newUser,\n    resetPassword\n} from \"../../redux/users\";\nimport {Row, Col, TreeSelect, Button, Card, Typography, Input, Select, Icon, message} from \"antd\";\nimport {getProjectStructure} from \"../../redux/data\";\nconst { TreeNode } = TreeSelect;\nconst { Title } = Typography;\nconst { Option } = Select;\n\n\nexport const UsersPage = connect(state => state, {getAllUsers, getProjectStructure, changeAvailableProjects, changeAvailableForUploads, resetPassword, newUser, deleteUser})((props) => {\n\n    const [newLogin, setNewLogin] = useState('');\n    const [newType, setNewType] = useState('user');\n    const [newAvailableProjects, setNewAvailableProjects] = useState([]);\n\n    const newUserAction = () => {\n        props.newUser({\n            role: newType,\n            username: newLogin,\n            password: \"\",\n            availableObjects: newAvailableProjects.map((item) => {\n                return {\n                    project: item.split(':')[0],\n                    object: item.split(':')[1] ? item.split(':')[1] : ''\n                }\n            }),\n            availableForUploads: newAvailableProjects.map((item) => {\n                return {\n                    project: item.split(':')[0],\n                    object: item.split(':')[1] ? item.split(':')[1] : ''\n                }\n            })\n        });\n        setNewLogin('');\n        setNewType('user');\n        setNewAvailableProjects([]);\n    };\n\n    const getAllProjectsList = () => {\n        let treeList = [];\n        if (props.data.projectStructure) {\n            props.data.projectStructure.list.forEach((item) => {\n                treeList.push(<TreeNode value={item.project + \":\" + item.object} title={item.project + \" \" + item.object} key={item.project + item.object}/>)\n            })\n        }\n        return treeList\n    };\n\n    const userCardsList = () => {\n        let users = props.users.usersList;\n        let usersCardList = [];\n        users.forEach((user) => {\n            let list = user.availableObjects.map((item) => {\n                return (item.project + \":\" + item.object)\n            });\n            let listForUploads = user.availableForUploads.map((item) => {\n                return (item.project + \":\" + item.object)\n            });\n            usersCardList.push(\n                <Card key={user.username}  style={{marginBottom: 30, backgroundColor: '#fafafa', borderRadius: '5px', textAlign: \"left\"}}>\n                    <Row>\n                        <Col lg={10} style={{padding: 10}}>\n                            <p>Логин:</p>\n                            <Title level={4}>{user.username}</Title>\n                        </Col>\n                        <Col lg={4} style={{padding: 10}}>\n                            <p>Тип:</p>\n                            <Title level={4}>{user.role}</Title>\n                        </Col>\n                        <Col lg={5} style={{padding: 10, textAlign: 'center', marginTop: 20}}>\n                            <Button type=\"primary\" onClick={() => {\n                                props.resetPassword({username: user.username})\n                                message.info('Пароль сброшен!');\n                            }} ghost style={{margin: \"10px auto\"}}> Сбросить пароль </Button>\n                        </Col>\n                        <Col lg={5} style={{padding: 10, textAlign: 'center',  marginTop: 20}}>\n                            <Button type=\"danger\" ghost style={{margin: \"10px auto\"}} onClick={() => {props.deleteUser({username: user.username})}}> Удалить пользователя </Button>\n                        </Col>\n                        <Col lg={12} style={{padding: 10}}>\n                            <p>Доступные объекты для просмотра:</p>\n                            <TreeSelect\n                                showSearch\n                                multiple\n                                style={{ width: '100%' }}\n                                defaultValue={list}\n                                onChange={(value) => {\n                                    props.changeAvailableProjects({username: user.username, availableProjects: value})\n                                }}\n                            >\n                                {getAllProjectsList()}\n                            </TreeSelect>\n                        </Col>\n                        <Col lg={12} style={{padding: 10}}>\n                            <p>Доступные объекты для загрузки:</p>\n                            <TreeSelect\n                                showSearch\n                                multiple\n                                style={{ width: '100%' }}\n                                defaultValue={listForUploads}\n                                onChange={(value) => {\n                                    props.changeAvailableForUploads({username: user.username, availableForUploads: value})\n                                }}\n                            >\n                                {getAllProjectsList()}\n                            </TreeSelect>\n                        </Col>\n                    </Row>\n                </Card>\n            )\n            });\n        return usersCardList\n    };\n\n    useEffect(() => {\n        props.getAllUsers();\n        props.getProjectStructure()\n    }, []);\n\n    return (\n        <div>\n            <Title level={3} style={{marginTop: 50}}>Добавить нового пользователя</Title>\n            <Card key='newUser'  style={{marginBottom: 30, backgroundColor: '#fafafa', borderRadius: '5px', textAlign: \"left\"}}>\n                <Row>\n                    <Col lg={6} style={{padding: 10}}>\n                        <p>Логин:</p>\n                        <Input placeholder=\"Введите логин\" value={newLogin} onChange={(e) => {\n                            setNewLogin(e.target.value)\n                        }}/>\n                    </Col>\n                    <Col lg={5} style={{padding: 10}}>\n                        <p>Тип:</p>\n                        <Select value={newType} style={{ width: \"100%\" }} onChange={(value) => {setNewType(value)}}>\n                            <Option value=\"user\">User (Загрузка отчетов)</Option>\n                            <Option value=\"admin\">Admin (Полный доступ)</Option>\n                            <Option value=\"manager\">Manager (Ограниченный доступ)</Option>\n                        </Select>\n                    </Col>\n                    <Col lg={9} style={{padding: 10}}>\n                        <p>Доступные проекты/объекты:</p>\n                        <TreeSelect\n                            showSearch\n                            multiple\n                            style={{ width: '100%' }}\n                            value={newAvailableProjects}\n                            onChange={(value) => {setNewAvailableProjects(value)}}\n                        >\n                            {getAllProjectsList()}\n                        </TreeSelect>\n                    </Col>\n                    <Col lg={4} style={{padding: 10, textAlign: 'center'}}>\n                        <Button block style={{marginTop: 33}} onClick={newUserAction}> <Icon type=\"plus\" /> Добавить </Button>\n                    </Col>\n                </Row>\n            </Card>\n            <Title level={3}>Список всех пользователей</Title>\n            {props.users.usersList && props.data.projectStructure ?\n                userCardsList()\n                :null\n            }\n        </div>\n    )\n})","import React, {useEffect, useState} from 'react';\nimport {connect} from \"react-redux\";\nimport {getCurrentMonthInfo} from \"../../redux/data\";\nimport { SelectMonth, previousMonth } from \"./commons/SelectMonth\";\nimport {Row, Col, Typography, Table, Switch, Button, Icon} from \"antd\";\nconst { Title } = Typography;\n\nexport const ReportPage = connect(state => state, {getCurrentMonthInfo})((props) => {\n    const today = new Date(Date.now());\n    const todayMonth = (today.getFullYear().toString())+((0+(today.getMonth()+1).toString()).slice(-2));\n    const [currentMonth, setCurrentMonth] = useState(previousMonth(todayMonth));\n    const [byProject, setByProject] = useState(true);\n    const [share, setShare] = useState(true);\n    const [columns, setColumns] = useState([]);\n    const [data, setData] = useState([]);\n    const rows = [\n        {name: 'Доход', code: 'code1000'},\n        {name: 'Общепроизводственные рассходы', code: 'code2002'},\n        {name: 'ФОТ и налоги на зп', code: 'code2001'},\n        {name: 'Аренда офиса', code: 'code2003'},\n        {name: 'Другие операционные расходы', code: 'code2005'},\n        {name: 'EBITDA', code: 'code6000'},\n        {name: 'EBITDA margin', code: 'code7000'},\n        {name: 'Амортизация / Возврат инвестиции', code: 'code2006'},\n        {name: '% по заемным средствам', code: 'code2004'},\n        {name: 'Оплата налогов', code: 'code2007'},\n        {name: 'Чистая прибыль', code: 'code3000'},\n        {name: 'Доля участия', code: 'code4000'},\n        {name: 'Чистая прибыль на долю', code: 'code5000'},\n    ];\n\n    function createColumns() {\n        let columns = [];\n        let availableObjects = props.auth.availableObjects.sort(sortByProject);\n        columns.push(        {\n            title: 'Позиции',\n            dataIndex: 'position',\n            key: 'position',\n            fixed: 'left',\n            width: 270\n        });\n        if (byProject) {\n            availableObjects.forEach((item) => {\n                if (!columns.find((el) => (el.key === item.project))) {\n                    columns.push({\n                        title: item.project,\n                        dataIndex: item.project,\n                        key: item.project,\n                        align: 'right',\n                    })\n                }\n            })\n        } else {\n            availableObjects.forEach((item) => {\n                columns.push({\n                    title: item.project + (item.object ? \": \" + item.object : ''),\n                    dataIndex: item.project + \":\" + item.object,\n                    key: item.project + \":\" + item.object,\n                    align: 'right',\n                    width: 150,\n                })\n            })\n        }\n        columns.push(        {\n            title: 'Всего',\n            dataIndex: 'total',\n            key: 'total',\n            fixed: 'right',\n            width: 100,\n            align: 'right',\n        });\n        setColumns(columns)\n    }\n\n    function createData() {\n        let data = [];\n        rows.forEach((row) => {\n            let dataObj = {total: 0};\n            columns.forEach((col, index) => {\n                dataObj.key = row.code;\n                if (col.dataIndex === 'position') {\n                    dataObj.position = row.name;\n                } else if (col.dataIndex !== 'total'){\n                    if (byProject) {\n                        dataObj[col.dataIndex] = 0;\n                        props.data.currentMonthInfo.data.forEach((item) => {\n                            if (item.status && item.share.projectName === col.dataIndex) {\n                                if (share && row.code === 'code5000') {\n                                    dataObj[col.dataIndex] += item.data.code3000 * item.data.code4000;\n                                    dataObj.total += item.data.code3000 * item.data.code4000\n                                } else if (row.code !== 'code4000' && row.code !== 'code6000' && row.code !== 'code7000') {\n                                    dataObj[col.dataIndex] += item.data[row.code];\n                                    dataObj.total += item.data[row.code]\n                                }\n                            }\n                        });\n                    } else {\n                        props.data.currentMonthInfo.data.forEach((item) => {\n                            if (col.title === item.key && item.status) {\n                                if (share && row.code === 'code5000') {\n                                    dataObj[col.dataIndex] = item.data.code3000 * item.data.code4000;\n                                    dataObj.total += item.data.code3000 * item.data.code4000\n                                } else if (row.code !== 'code4000' && row.code !== 'code6000' && row.code !== 'code7000') {\n                                    dataObj[col.dataIndex] = item.data[row.code];\n                                    dataObj.total += item.data[row.code]\n                                }\n                            }\n                        })\n                    }\n                }\n            });\n            if (share || (row.code !== 'code4000' && row.code !== 'code5000')) {data.push(dataObj)}\n        });\n\n        for (let key in data[0]) {\n            if (key !== 'position' && key !== 'key') {\n                if(data[0][key]) {\n                    data[5][key] = Math.round((data[0][key] - data[1][key] - data[2][key] - data[3][key] - data[4][key]) * 100) / 100;\n                    data[6][key] = Math.round(data[5][key] / data[0][key] * 10000) / 100 + \"%\";\n                } else {\n                    data[5][key] = '';\n                    data[6][key] = ''\n                }\n            }\n        }\n\n        if (share) {\n            data[11].total = '';\n            for (let key in data[0]) {\n                if (key !== 'position' && key !== 'key' && key !== 'total') {\n                    if (byProject) {\n                        let svd = 0;\n                        let svdnd = 0;\n                        props.data.currentMonthInfo.data.forEach((item) => {\n                            if (item.status && item.share.projectName === key) {\n                                console.log(item);\n                                svd += Math.abs(item.data.code3000);\n                                svdnd += Math.abs(item.data.code3000*item.data.code4000);\n                            }\n                        });\n                        if (svd && svdnd) {\n                            data[11][key] = Math.round(svdnd / svd * 10000) / 100 + \"%\";\n                        } else {\n                            data[11][key] = ''\n                        }\n                    } else {\n                        if (data[10][key]) {\n                            data[11][key] = Math.round(data[12][key] / data[10][key] * 10000) / 100 + \"%\";\n                        } else {\n                            data[11][key] = ''\n                        }\n                    }\n                }\n            }\n        }\n\n        data.forEach((row) => {\n            if (row.key !== 'code4000' && row.key !== 'code7000') {\n                for (let key in row) {\n                    if (key !== 'position' && key !== 'key') {\n                        row[key] = refactorNumber(row[key])\n                    }\n                }\n            }\n        });\n\n        setData(data)\n    }\n\n    console.log(\"props.data.currentMonthInfo: \", props.data.currentMonthInfo);\n    console.log(\"data: \", data);\n\n    function refactorNumber(number) {\n        if (number) {\n            let str = Math.round(number).toString();\n            return (str.slice(0, -9) + ' ' + str.slice(-9, -6) + ' ' + str.slice(-6, -3) + ' ' + str.slice(-3))\n        } else {\n            return ''\n        }\n    }\n\n    function sortByProject (a, b) {\n        if (a.project > b.project) {\n            return 1;\n        }\n        if (a.project < b.project) {\n            return -1;\n        }\n        if (a.object > b.object) {\n            return 1;\n        }\n        if (a.object < b.object) {\n            return -1;\n        }\n        return 0;\n    }\n\n    useEffect(() => {\n        if (currentMonth) {\n            props.getCurrentMonthInfo({month: currentMonth, availableObjects: props.auth.availableObjects.map(item => item.project + \":\" + item.object)})\n        }\n        setData([]);\n    }, [currentMonth]);\n\n    useEffect(() => {\n        if (columns && props.data.currentMonthInfo.data) {\n            createData()\n        }\n    }, [columns, props.data.currentMonthInfo.data, share]);\n\n    useEffect(() => {\n        if (currentMonth) {\n            props.getCurrentMonthInfo({month: currentMonth, availableObjects: props.auth.availableObjects.map(item => item.project + \":\" + item.object)})\n        }\n        createColumns();\n    }, []);\n\n    useEffect(() => {\n            props.getCurrentMonthInfo({month: currentMonth, availableObjects: props.auth.availableObjects.map(item => item.project + \":\" + item.object)});\n        createColumns();\n    }, [byProject]);\n\n    return(\n        <div>\n            <Title level={3}>Консолидированный отчет</Title>\n            <Row>\n                <Col lg={8} style={{marginTop: 10}}>\n                    <p><Switch defaultChecked onChange={checked => {setByProject(checked)}} /> Группировать по проектам </p>\n                    <p><Switch defaultChecked onChange={checked => {setShare(checked)}} /> Отображать долю участия </p>\n                </Col>\n                <Col lg={8} style={{marginTop: 15}}>\n                    {props.data.currentMonthInfo ?\n                        <SelectMonth currentMonth={currentMonth} setCurrentMonth={setCurrentMonth} currentMonthName={props.data.currentMonthInfo.name}/>\n                        :null\n                    }\n                </Col>\n                <Col lg={8} style={{marginTop: 25}}><Button onClick={() => {props.setTab('excelReport')}}> <Icon type=\"file-excel\"/>Создать excel</Button></Col>\n            </Row>\n            <Row style={{marginTop: 10}}>\n                <Table className='consolidate-report' columns={columns} dataSource={data} pagination={false} scroll={{ x: columns.length*150, y: 0 }} size=\"small\"/>\n            </Row>\n        </div>\n    )\n});\n","import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\";\nimport {Button, Row, Icon, Typography, Col, Switch, TreeSelect, Steps} from \"antd\";\nimport {SelectMonth} from \"./commons/SelectMonth\";\nimport {createExcel} from \"../../redux/data\";\nconst { Title } = Typography;\nconst { TreeNode } = TreeSelect;\n\nconst months = [\n    {key: \"01\", name: \"Январь\"},\n    {key: \"02\", name: \"Февраль\"},\n    {key: \"03\", name: \"Март\"},\n    {key: \"04\", name: \"Апрель\"},\n    {key: \"05\", name: \"Май\"},\n    {key: \"06\", name: \"Июнь\"},\n    {key: \"07\", name: \"Июль\"},\n    {key: \"08\", name: \"Август\"},\n    {key: \"09\", name: \"Сентябрь\"},\n    {key: \"10\", name: \"Октябрь\"},\n    {key: \"11\", name: \"Ноябрь\"},\n    {key: \"12\", name: \"Декабрь\"}\n    ];\nconst rows = [\n    {name: 'Доход', code: 'code1000'},\n    {name: 'Общепроизводственные рассходы', code: 'code2002'},\n    {name: 'ФОТ и налоги на зп', code: 'code2001'},\n    {name: 'Аренда офиса', code: 'code2003'},\n    {name: 'Другие операционные расходы', code: 'code2005'},\n    {name: 'Амортизация / Возврат инвестиции', code: 'code2006'},\n    {name: '% по заемным средствам', code: 'code2004'},\n    {name: 'Оплата налогов', code: 'code2007'},\n    {name: 'Чистая прибыль', code: 'code3000'},\n    {name: 'Доля участия', code: 'code4000'},\n    {name: 'Чистая прибыль на долю', code: 'code5000'},\n];\n\nexport const ExcelReport = connect(state => state, {createExcel})((props) => {\n    const today = new Date(Date.now());\n    const todayMonth = (today.getFullYear().toString())+((0+(today.getMonth()+1).toString()).slice(-2));\n    const [firstMonth, setFirstMonth] = useState(todayMonth);\n    const [lastMonth, setLastMonth] = useState(todayMonth);\n    const [byProject, setByProject] = useState(true);\n    const [share, setShare] = useState(true);\n    const [changeProjects, setChangeProjects] = useState(true);\n    const [projects, setProjects] = useState(props.auth.availableObjects.map(item => item.project + \":\" + item.object));\n\n    function validLastMonth(lastMonth) {\n        if (+firstMonth <= +lastMonth) {\n            setLastMonth(lastMonth)\n        }\n    }\n\n    function validFirstMonth(firstMonth) {\n        if (+firstMonth <= +lastMonth) {\n            setFirstMonth(firstMonth)\n        } else {\n            setFirstMonth(firstMonth);\n            setLastMonth(firstMonth)\n        }\n    }\n\n    function getAllProjectsList() {\n        let treeList = [];\n        props.auth.availableObjects.forEach((item) => {\n                treeList.push(<TreeNode value={item.project + \":\" + item.object} title={item.project + \" \" + item.object} key={item.project + item.object}/>)\n            });\n        return treeList\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col lg={6} style={{marginTop: 10}}><div style={{textAlign: \"left\"}}><Button onClick={() => {props.setTab('report')}}><Icon type=\"arrow-left\" /> Назад</Button></div></Col>\n                <Col lg={12} style={{marginTop: 10}}><Title level={3}>Создать отчет в excel</Title></Col>\n                <Col lg={6}> </Col>\n            </Row>\n            <Row style={{marginTop: 30}}>\n                <Col lg={8}>\n                    <Title level={4}>Настройки</Title>\n                    <div style={{marginTop: 30, paddingLeft: 20, textAlign: \"left\"}}>\n                        <p><Switch defaultChecked onChange={checked => {setByProject(checked)}} /> Группировать по проектам </p>\n                        <p><Switch defaultChecked onChange={checked => {setShare(checked)}} /> Отображать долю участия </p>\n                        <p><Switch defaultChecked onChange={checked => {setChangeProjects(checked)}} /> Выбрать все проекты </p>\n                        {!changeProjects ?\n                            <Col style={{marginTop: 10, fontSize: 18}}>\n                                <TreeSelect\n                                    showSearch\n                                    multiple\n                                    style={{maxWidth: 600}}\n                                    value={projects}\n                                    onChange={(value) => {\n                                        setProjects(value)\n                                    }}\n                                >\n                                    {getAllProjectsList()}\n                                </TreeSelect>\n                            </Col>\n                            : null\n                        }\n                    </div>\n                    </Col>\n                <Col lg={8}>\n                    <Title level={4}>Период</Title>\n                    <p style={{fontSize: 18, marginBottom: 0, marginTop: 20}}>Первый месяц: </p>\n                    <SelectMonth currentMonth={firstMonth} setCurrentMonth={validFirstMonth} currentMonthName={months[(firstMonth.slice(4)-1)].name + ' ' + firstMonth.slice(0,4)}/>\n                    <p style={{fontSize: 18, marginBottom: 0, marginTop: 20}}>Последний месяц: </p>\n                    <SelectMonth currentMonth={lastMonth} setCurrentMonth={validLastMonth} currentMonthName={months[(lastMonth.slice(4)-1)].name + ' ' + lastMonth.slice(0,4)}/>\n\n                </Col>\n                <Col lg={8}>\n                    <Title level={4}>Загрузка</Title>\n                    <div style={{marginTop: 30, fontSize: 18}}>\n                        <Button size='large' onClick={() => {\n                            props.createExcel({\n                                byProject: byProject,\n                                projects: projects,\n                                share: share,\n                                firstMonth: firstMonth,\n                                lastMonth: lastMonth\n                            })\n                        }}> <Icon type=\"cloud-download\"/>Скачать файл</Button>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col style={{marginTop: 15, fontSize: 18}}>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col style={{marginTop: 50, fontSize: 18}}>\n\n                </Col>\n            </Row>\n        </div>\n    )\n});\n","import React, {useEffect, useState} from 'react';\nimport {connect} from \"react-redux\";\nimport {Typography, Table, Icon} from \"antd\";\nimport {getHistory} from \"../../redux/data\";\nimport {SelectMonth} from \"./commons/SelectMonth\";\nconst { Title } = Typography;\nconst months = [\n    {key: \"01\", name: \"Январь\"},\n    {key: \"02\", name: \"Февраль\"},\n    {key: \"03\", name: \"Март\"},\n    {key: \"04\", name: \"Апрель\"},\n    {key: \"05\", name: \"Май\"},\n    {key: \"06\", name: \"Июнь\"},\n    {key: \"07\", name: \"Июль\"},\n    {key: \"08\", name: \"Август\"},\n    {key: \"09\", name: \"Сентябрь\"},\n    {key: \"10\", name: \"Октябрь\"},\n    {key: \"11\", name: \"Ноябрь\"},\n    {key: \"12\", name: \"Декабрь\"}\n];\n\n\nexport const HistoryPage = connect(state => state, {getHistory})((props) => {\n    const [currentMonth, setCurrentMonth] = useState((new Date(Date.now())).getFullYear().toString() + (\"0\" +((new Date(Date.now())).getMonth()+1).toString()).slice(-2));\n\n    const columns = [\n        {\n            title: 'Время - Дата',\n            dataIndex: 'date',\n            key: 'date',\n            render: (date) => {\n                let dateObj = new Date(date);\n                let minutes = dateObj.getMinutes();\n                if (+minutes < 10) {minutes = '0' + minutes}\n                return (dateObj.getHours() + \":\" + minutes + ' - ' + dateObj.getDate() + \"/\" +(dateObj.getMonth()+1)+ \"/\" +dateObj.getFullYear())\n            },\n        },\n        {\n            title: 'Пользователь',\n            dataIndex: 'username',\n            key: 'username'\n        },\n        {\n            title: 'Отчет',\n            dataIndex: 'report',\n            key: 'report',\n        },\n        {\n            title: 'Событие',\n            dataIndex: 'action',\n            key: 'action',\n            render: (action) => {\n                switch (action) {\n                    case \"success upload\":\n                        return (<div><Icon type=\"check\"  style={{color: \"green\"}}/>  - Удачная загрузка </div>);\n                    case \"failed upload\":\n                        return (<div><Icon type=\"warning\"  style={{color: \"orange\"}}/>  - Неудачная загрузка </div>);\n                    case \"delete\":\n                        return (<div><Icon type=\"close\"  style={{color: \"red\"}}/>  - Удаление отчета </div>);\n                }\n            },\n        }\n        ];\n\n    useEffect(() => {\n        props.getHistory({period: currentMonth})\n    },[]);\n\n    useEffect(() => {\n        props.getHistory({period: currentMonth})\n    },[currentMonth]);\n\n    return (\n       <div>\n           <Title level={3}>История загрузок</Title>\n           <SelectMonth currentMonth={currentMonth} setCurrentMonth={setCurrentMonth} currentMonthName={months[(+currentMonth.slice(4)-1)].name + ' ' + currentMonth.slice(0,4)}/>\n           {props.data.history ?\n               <Table style={{marginTop: 10}} columns={columns} dataSource={props.data.history} pagination={false} size=\"small\"/>\n               : null\n           }\n       </div>\n   )\n});","import React, {useEffect, useState} from 'react';\nimport {connect} from \"react-redux\";\nimport {Row, Col, Typography, Table, Switch, Button, Icon, TreeSelect} from \"antd\";\nimport {Line} from 'react-chartjs-2';\nimport {SelectMonth} from \"./commons/SelectMonth\";\nimport {getChartInfo} from \"../../redux/data\";\nconst { Title } = Typography;\nconst { TreeNode } = TreeSelect;\nconst months = [\n    {key: \"01\", name: \"Январь\"},\n    {key: \"02\", name: \"Февраль\"},\n    {key: \"03\", name: \"Март\"},\n    {key: \"04\", name: \"Апрель\"},\n    {key: \"05\", name: \"Май\"},\n    {key: \"06\", name: \"Июнь\"},\n    {key: \"07\", name: \"Июль\"},\n    {key: \"08\", name: \"Август\"},\n    {key: \"09\", name: \"Сентябрь\"},\n    {key: \"10\", name: \"Октябрь\"},\n    {key: \"11\", name: \"Ноябрь\"},\n    {key: \"12\", name: \"Декабрь\"}\n];\nconst colors = [\n    \"rgb(117,106,111)\",\n    \"rgb(163,195,168)\",\n    \"rgb(174,186,230)\",\n    \"rgb(255,174,254)\",\n    \"rgb(255,191,150)\",\n    \"rgb(255,128,172)\",\n    \"rgb(138,124,255)\",\n    \"rgb(158,91,75)\",\n    \"rgb(133,105,55)\",\n    \"rgb(82,212,104)\",\n    \"rgb(193,193,56)\",\n    \"rgb(210,70,255)\",\n    \"rgb(53,150,246)\",\n    \"rgb(195,40,149)\",\n    \"rgb(255,87,46)\",\n    \"rgb(37,200,255)\",\n    \"rgb(213,27,60)\",\n    \"rgb(255,123,0)\",\n    \"rgb(255,166,0)\",\n    \"rgb(74,122,0)\",\n    \"rgb(0,255,0)\",\n    \"rgb(0,139,109)\",\n    \"rgb(0,255,250)\",\n    \"rgb(0,132,146)\"];\n\nexport const Charts = connect(state => state, {getChartInfo})((props) => {\n    const today = new Date(Date.now());\n    const [firstMonth, setFirstMonth] = useState(today.getFullYear().toString()+'01');\n    const [lastMonth, setLastMonth] = useState(today.getFullYear().toString()+'12');\n    const [byProject, setByProject] = useState(true);\n    const [share, setShare] = useState(true);\n    const [changeProjects, setChangeProjects] = useState(true);\n    const [projects, setProjects] = useState(props.auth.availableObjects.map(item => item.project + \":\" + item.object));\n\n    function validLastMonth(lastMonth) {\n        if (+firstMonth <= +lastMonth) {\n            setLastMonth(lastMonth)\n        }\n    }\n\n    function validFirstMonth(firstMonth) {\n        if (+firstMonth <= +lastMonth) {\n            setFirstMonth(firstMonth);\n        } else {\n            setFirstMonth(firstMonth);\n            setLastMonth(firstMonth)\n        }\n    }\n\n    function getAllProjectsList() {\n        let treeList = [];\n        props.auth.availableObjects.forEach((item) => {\n            treeList.push(<TreeNode value={item.project + \":\" + item.object} title={item.project + \" \" + item.object} key={item.project + item.object}/>)\n        });\n        return treeList\n    }\n\n    useEffect(() => {\n        props.getChartInfo({\n            byProject: byProject,\n            projects: projects,\n            share: share,\n            firstMonth: firstMonth,\n            lastMonth: lastMonth,\n        })\n    }, []);\n\n    useEffect(() => {\n        props.getChartInfo({\n            byProject: byProject,\n            projects: projects,\n            share: share,\n            firstMonth: firstMonth,\n            lastMonth: lastMonth,\n        })\n    }, [byProject, projects, share, firstMonth, lastMonth]);\n\n    return (\n        <div>\n            <Title level={3} style={{marginTop: 10}}>Графики</Title>\n            <Row style={{marginTop: 10, marginBottom: 30}}>\n                <Col lg={8}>\n                    <div style={{marginTop: 60, paddingLeft: 20, textAlign: \"left\"}}>\n                        <p><Switch defaultChecked onChange={checked => {setByProject(checked)}} /> Группировать по проектам </p>\n                        <p><Switch defaultChecked onChange={checked => {setShare(checked)}} /> Отображать долю участия </p>\n                        <p><Switch defaultChecked onChange={checked => {setChangeProjects(checked)}} /> Выбрать все проекты </p>\n                        {!changeProjects ?\n                            <Col style={{marginTop: 10, fontSize: 18}}>\n                                <TreeSelect\n                                    showSearch\n                                    multiple\n                                    style={{maxWidth: 600}}\n                                    value={projects}\n                                    onChange={(value) => {\n                                        setProjects(value)\n                                    }}\n                                >\n                                    {getAllProjectsList()}\n                                </TreeSelect>\n                            </Col>\n                            : null\n                        }\n                    </div>\n                </Col>\n                <Col lg={8}>\n                    <p style={{fontSize: 18, marginBottom: 0, marginTop: 20}}>Первый месяц: </p>\n                    <SelectMonth currentMonth={firstMonth} setCurrentMonth={validFirstMonth} currentMonthName={months[(firstMonth.slice(4)-1)].name + ' ' + firstMonth.slice(0,4)}/>\n                    <p style={{fontSize: 18, marginBottom: 0, marginTop: 20}}>Последний месяц: </p>\n                    <SelectMonth currentMonth={lastMonth} setCurrentMonth={validLastMonth} currentMonthName={months[(lastMonth.slice(4)-1)].name + ' ' + lastMonth.slice(0,4)}/>\n\n                </Col>\n            </Row>\n            <Line data={props.data.chartInfo} />\n        </div>\n    )\n});","import React, {useState} from 'react';\nimport { Menu, Icon } from 'antd';\nimport {UploadsStatus} from \"./UploadsStatus\";\nimport {ProjectManagement} from \"./ProjectManagement\";\nimport {UsersPage} from \"./UsersPage\";\nimport {ReportPage} from \"./ReportPage\";\nimport {UploadPage} from \"../UploadPage\";\nimport {ExcelReport} from \"./ExcelReport\";\nimport {HistoryPage} from \"./HistoryPage\";\nimport {Charts} from \"./Charts\";\n\nexport const AdminPage = (props) => {\n    const [tab, setTab] = useState('uploadsStatus');\n\n    const tabsClick = (e) => {\n        setTab(e.key,);\n    };\n\n    const renderPage = () => {\n        switch (tab) {\n            case 'uploadsStatus':\n                return <UploadsStatus />;\n            case 'projectsMap':\n                return <ProjectManagement />;\n            case 'usersMap':\n                return <UsersPage />;\n            case 'report':\n                return <ReportPage setTab={setTab}/>;\n            case 'excelReport':\n                return <ExcelReport setTab={setTab}/>;\n            case 'graphs':\n                return <Charts/>;\n            case 'history':\n                return <HistoryPage/>;\n            case 'upload':\n                return <UploadPage/>;\n        }\n    };\n\n    return (\n        <div>\n            <Menu onClick={tabsClick} selectedKeys={[tab]} mode=\"horizontal\" style={{ marginBottom: '50px'}}>\n                <Menu.Item key=\"uploadsStatus\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"file-done\" style={{ fontSize: '20px'}}/>\n                    Статусы загрузок\n                </Menu.Item>\n                <Menu.Item key=\"projectsMap\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"deployment-unit\" style={{ fontSize: '20px'}}/>\n                    Проекты\n                </Menu.Item>\n                <Menu.Item key=\"usersMap\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"team\" style={{ fontSize: '20px'}}/>\n                    Пользователи\n                </Menu.Item>\n                <Menu.Item key=\"report\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"table\" style={{ fontSize: '20px'}}/>\n                    Отчет\n                </Menu.Item>\n                <Menu.Item key=\"graphs\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"bar-chart\" style={{ fontSize: '20px'}}/>\n                    Графики\n                </Menu.Item>\n                <Menu.Item key=\"history\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"history\" style={{ fontSize: '20px'}}/>\n                    История\n                </Menu.Item>\n                <Menu.Item key=\"upload\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"cloud-upload\" style={{ fontSize: '20px'}}/>\n                    Загрузка\n                </Menu.Item>\n            </Menu>\n            {renderPage()}\n        </div>\n    )\n};\n\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {all} from \"redux-saga/effects\";\nimport {authReducer, authSaga} from \"./auth\";\nimport {dataReducer, dataSaga} from \"./data\";\nimport {usersReducer, usersSaga} from \"./users\";\n\n// reducer\n\nconst reducer = combineReducers({\n    auth: authReducer,\n    data: dataReducer,\n    users: usersReducer\n});\n\n\n// root saga\nfunction* rootSaga() {\n  yield all([\n      authSaga(),\n      dataSaga(),\n      usersSaga()\n  ]);\n}\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(reducer, applyMiddleware(saga));\nsaga.run(rootSaga);\n\nexport default store;\n","import React, {useEffect, useState} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from \"react-router-dom\";\nimport {getLoginStatus, logout} from \"../redux/auth\";\nimport { Button } from 'antd';\n\n\nexport const Header = withRouter(connect(state => state, {getLoginStatus, logout})((props) => {\n    const redirect = () => {\n        if (props.auth.loginStatus) {\n            switch (props.auth.loginStatus) {\n                case 'user':\n                    props.history.push('/upload');\n                    break;\n                case 'admin':\n                    props.history.push('/admin');\n                    break;\n                case 'manager':\n                    props.history.push('/manager');\n                    break\n            }\n        } else {\n            props.history.push('/login')\n        }\n    };\n\n    useEffect(() => {\n        props.getLoginStatus();\n    }, []);\n\n    useEffect(() => {\n        redirect();\n    }, [props.auth.loginStatus]);\n\n    return(\n        <div className='header'>\n            {props.auth.loginStatus ?\n                <Button onClick={()=>{\n                    props.history.push('/login')\n                    props.logout();\n                }}>Выйти</Button>\n                : null\n            }\n        </div>\n    )\n}));\n","import React, {useState} from 'react';\nimport { Menu, Icon } from 'antd';\nimport {UploadsStatus} from \"./AdminPage/UploadsStatus\";\nimport {ReportPage} from \"./AdminPage/ReportPage\";\nimport {ExcelReport} from \"./AdminPage/ExcelReport\";\nimport {Charts} from \"./AdminPage/Charts\";\nimport {UploadPage} from \"./UploadPage\";\n\nexport const ManagerPage = (props) => {\n    const [tab, setTab] = useState('uploadsStatus');\n\n    const tabsClick = (e) => {\n        setTab(e.key,);\n    };\n\n    const renderPage = () => {\n        switch (tab) {\n            case 'uploadsStatus':\n                return <UploadsStatus />;\n            case 'report':\n                return <ReportPage setTab={setTab}/>;\n            case 'excelReport':\n                return <ExcelReport setTab={setTab}/>;\n            case 'graphs':\n                return <Charts/>;\n            case 'upload':\n                return <UploadPage/>;\n        }\n    };\n\n    return (\n        <div>\n            <Menu onClick={tabsClick} selectedKeys={[tab]} mode=\"horizontal\" style={{ marginBottom: '50px'}}>\n                <Menu.Item key=\"uploadsStatus\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"file-done\" style={{ fontSize: '20px'}}/>\n                    Статусы загрузок\n                </Menu.Item>\n                <Menu.Item key=\"report\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"table\" style={{ fontSize: '20px'}}/>\n                    Отчет\n                </Menu.Item>\n                <Menu.Item key=\"graphs\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"bar-chart\" style={{ fontSize: '20px'}}/>\n                    Графики\n                </Menu.Item>\n                <Menu.Item key=\"upload\" style={{ fontSize: '18px'}}>\n                    <Icon type=\"cloud-upload\" style={{ fontSize: '20px'}}/>\n                    Загрузка\n                </Menu.Item>\n            </Menu>\n            {renderPage()}\n        </div>\n    )\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport LoginPage from \"./components/LoginPage\";\nimport {UploadPage} from \"./components/UploadPage\";\nimport {AdminPage} from \"./components/AdminPage/\";\nimport store from \"./redux\";\nimport {Provider} from \"react-redux\";\nimport {Header} from \"./components/Header\";\nimport {ManagerPage} from \"./components/ManagerPage\";\n\nexport default function App () {\n    return (\n        <Provider store={store}>\n            <Router>\n                <div className=\"App\">\n                    <Header />\n                    <Switch>\n                        <Route path='/login' exact component={LoginPage}/>\n                        <Route path='/upload' exact component={UploadPage}/>\n                        <Route path='/admin' exact component={AdminPage}/>\n                        <Route path='/manager' exact component={ManagerPage}/>\n                    </Switch>\n                </div>\n            </Router>\n        </Provider>\n    );\n\n};\n"],"sourceRoot":""}